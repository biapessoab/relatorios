[{"/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/index.js":"1","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/App.js":"2","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/procedimentos.js":"3","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/cirurgias.js":"4","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/Forms.js":"5","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/summary.jsx":"6","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/document.js":"7","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/procedimentos-bf.js":"8","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/summary-bf.jsx":"9","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/document-bf.js":"10"},{"size":255,"mtime":1691709543611,"results":"11","hashOfConfig":"12"},{"size":1280,"mtime":1712192860871,"results":"13","hashOfConfig":"12"},{"size":10370,"mtime":1712192382948,"results":"14","hashOfConfig":"12"},{"size":9173,"mtime":1712190130785,"results":"15","hashOfConfig":"12"},{"size":2898,"mtime":1712192564952,"results":"16","hashOfConfig":"12"},{"size":12305,"mtime":1691713166726,"results":"17","hashOfConfig":"12"},{"size":9351,"mtime":1693233758306,"results":"18","hashOfConfig":"12"},{"size":10374,"mtime":1712192675006,"results":"19","hashOfConfig":"12"},{"size":10911,"mtime":1712192917050,"results":"20","hashOfConfig":"12"},{"size":8358,"mtime":1712192825486,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1le79hg",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/index.js",[],[],[],"/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/App.js",[],[],"/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/procedimentos.js",[],[],"/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/cirurgias.js",[],[],"/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/Forms.js",[],[],"/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/summary.jsx",["57"],[],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nfunction Summary() {\n    const [procedimentos, setProcedimentos] = useState([]);\n    const [cirurgias, setCirurgias] = useState([]);\n    const [percentage, setPercentage] = useState(null);\n    const [desconto, setDesconto] = useState(null);\n    const [valorFinal, setValorFinal] = useState(0);\n    const [numParcelas, setNumParcelas] = useState(0);\n    const [maxDesconto, setMaxDesconto] = useState(0);\n    const [parcelasSelecionadas, setParcelasSelecionadas] = useState(0);\n    const [selectedPayment, setSelectedPayment] = useState('aVista');\n    const pagamento = document.getElementById('pagamento');\n\n    let sumProcedimentos = 0;\n    let sumCirurgias = 0;\n\n    useEffect(() => {\n        const procedimentosString = localStorage.getItem('procedimentos');\n        const procedimentos = JSON.parse(procedimentosString);\n        setProcedimentos(procedimentos);\n\n        const cirurgiasString = localStorage.getItem('cirurgias');\n        const cirurgias = JSON.parse(cirurgiasString);\n        setCirurgias(cirurgias);\n\n        if (percentage === null) {\n            setPercentage(0)\n        }\n\n        if (desconto === null) {\n            setDesconto(0)\n        }\n\n        const valorCalculado = (sumProcedimentos + sumCirurgias - desconto) * (1 - percentage / 100);\n        if (percentage >= 0 && percentage <= 10 && desconto <= 1000) {\n            setValorFinal(valorCalculado);\n        } else if (desconto <= 1000) {\n            setValorFinal(sumProcedimentos + sumCirurgias - desconto);\n        } else {\n            setValorFinal(sumProcedimentos + sumCirurgias);\n        }\n\n        if (sumProcedimentos < 12000) {\n            setNumParcelas(4)\n            setMaxDesconto(3.5)\n        }\n        else if (sumProcedimentos >= 12000 && sumProcedimentos < 25000) {\n            setNumParcelas(6)\n            setMaxDesconto(5)\n        } else {\n            setNumParcelas(10)\n            setMaxDesconto(10)\n        }\n\n        const pString = localStorage.getItem('password');\n        const p = JSON.parse(pString);\n\n        if (p === null) {\n            history.push(\"/\");\n        }\n\n    }, [desconto, percentage, sumProcedimentos, sumCirurgias, numParcelas, maxDesconto]);\n\n    const procedimentosFiltrados = procedimentos.filter(item => item.price > 0);\n    const cirurgiasFiltradas = cirurgias.filter(item => item.price > 0);\n\n    const submit = (e) => {\n        localStorage.setItem('pagamento', JSON.stringify(pagamento.value));\n        localStorage.setItem('soma', JSON.stringify(valorFinal));\n        localStorage.setItem('percentage', JSON.stringify(percentage));\n        localStorage.setItem('parcelasSelecionadas', JSON.stringify(parcelasSelecionadas));\n        localStorage.setItem('valorDesconto', JSON.stringify(sumCirurgias + sumProcedimentos - valorFinal));\n        e.preventDefault();\n        history.push('/document');\n    };\n\n    const history = useHistory();\n    const goToPreviousPage = () => {\n        history.push('/cirurgias');\n    };\n\n    return (\n        <div>\n            <div className=\"flex justify-center bg-green h-screen\">\n                <form className=\"pt-6\" onSubmit={submit} autoComplete='off' action='/document'>\n                    <div className=\"flex justify-center text-4xl text-white mb-6\">Resumo</div>\n                    {procedimentosFiltrados.length > 0 ?\n                        <div>\n                            <div className=\"my-4 text-lg underline text-white underline-offset-4\">Procedimentos</div>\n                            {procedimentosFiltrados.map((item, index) => {\n                                sumProcedimentos += item.price;\n                                return (\n                                    <div>\n                                        <div key={index} className=\"text-white\">\n                                            <p>{item.nome} ({item.quant}): R$ {item.price}</p>\n                                        </div>\n                                        <hr />\n                                    </div>\n                                );\n                            })}\n                            <div className='text-white text-end my-2 font-bold'>Soma = {parseFloat(sumProcedimentos).toFixed(2)}</div>\n                        </div>\n                        :\n                        <></>\n                    }\n                    {cirurgiasFiltradas.length > 0 ?\n                        <div>\n                            <div className=\"my-6 text-lg underline text-white underline-offset-4\">Cirurgias</div>\n                            {cirurgiasFiltradas.map((item, index) => {\n                                sumCirurgias += parseInt(item.price);\n                                return (\n                                    <div>\n                                        <div key={index} className=\"text-white\">\n                                            <p>{item.nome}: R$ {item.price}</p>\n                                        </div>\n                                        <hr />\n                                    </div>\n                                );\n                            })}\n                            <div className='text-white text-end my-2 font-bold'>Soma = {parseFloat(sumCirurgias).toFixed(2)}</div>\n                        </div>\n                        :\n                        <></>\n                    }\n\n                    {procedimentosFiltrados.length > 0 ?\n                        <div>\n                            <div className=\"mt-6 mb-2 text-lg underline text-white underline-offset-4\">Forma de Pagamento</div>\n                            <select\n                                name=\"pagamento\"\n                                id=\"pagamento\"\n                                className=\"bg-white rounded-md text-sm mr-10\"\n                                onChange={(e) => setSelectedPayment(e.target.value)}\n                            >\n                                <option value=\"aVista\">À vista</option>\n                                <option value=\"parcelado\">Parcelado</option>\n                            </select>\n\n                            {selectedPayment === 'aVista' ? (\n                                <>\n                                    <input\n                                        type=\"number\"\n                                        id=\"percentage\"\n                                        step=\"any\"\n                                        className=\"border rounded-md p-1 w-16 my-4 inline-block bg-white text-black h-6\"\n                                        value={percentage}\n                                        onChange={(e) => {\n                                            const newPercentage = parseFloat(e.target.value);\n                                            if (!isNaN(newPercentage) && newPercentage >= 0 && newPercentage <= 10 && newPercentage <= maxDesconto) {\n                                                setPercentage(newPercentage);\n                                            } else {\n                                                setPercentage(''); // Clear the input value if not valid\n                                            }\n                                        }}\n                                    />\n                                    <label className='text-white m-2'>%</label>\n                                </>\n                            ) : (\n                                <select\n                                    name=\"numeroParcelas\"\n                                    id=\"numeroParcelas\"\n                                    className=\"bg-white rounded-md text-sm\"\n                                    onChange={(e) => setParcelasSelecionadas(parseInt(e.target.value))}\n                                    value={parcelasSelecionadas}\n                                >\n                                    {/* Opções de 1 a 10 */}\n                                    {Array.from({ length: numParcelas }, (_, i) => (\n                                        <option key={i + 1} value={i + 1}>\n                                            {i + 1} parcela{i > 0 ? 's' : ''}\n                                        </option>\n                                    ))}\n                                </select>\n                            )}\n                        </div>\n                        :\n                        <div>\n                            <div className=\"mt-6 mb-2 text-lg underline text-white underline-offset-4\">Negociação</div>\n                            <label className='text-white mr-2'>R$</label>\n                                    <input\n                                        type=\"number\"\n                                        id=\"desconto\"\n                                        className=\"border rounded-md p-1 w-12 my-4 inline-block bg-white text-black h-6 mr-20\"\n                                        max='1000'\n                                        onChange={(e) => setDesconto(parseInt(e.target.value))}\n                                    />\n\n                            <div className=\"mt-6 mb-2 text-lg underline text-white underline-offset-4\">Forma de Pagamento</div>\n                            <select\n                                name=\"pagamento\"\n                                id=\"pagamento\"\n                                className=\"bg-white rounded-md text-sm mr-10\"\n                                onChange={(e) => setSelectedPayment(e.target.value)} // Atualizar o estado ao selecionar uma opção\n                            >\n                                <option value=\"aVista\">À vista</option>\n                                <option value=\"parcelado\">Parcelado</option>\n                            </select>\n\n                            {/* Renderizar o input baseado na opção de pagamento selecionada */}\n                            {selectedPayment === 'aVista' ? (\n                                <>\n                                    <input\n                                        type=\"number\"\n                                        id=\"percentage\"\n                                        step=\"any\"\n                                        className=\"border rounded-md p-1 w-16 my-4 inline-block bg-white text-black h-6\"\n                                        onChange={(e) => {\n                                            if(e.target.value <= 5) {\n                                                setPercentage(e.target.value)\n                                            }\n                                        }}\n                                    />\n                                    <label className='text-white m-2'>%</label>\n                                </>\n                            ) : (\n                                <select\n                                    name=\"numeroParcelas\"\n                                    id=\"numeroParcelas\"\n                                    className=\"bg-white rounded-md text-sm\"\n                                    onChange={(e) => setParcelasSelecionadas(parseInt(e.target.value))}\n                                    value={parcelasSelecionadas}\n                                >\n                                    {Array.from({ length: 10 }, (_, i) => (\n                                        <option key={i + 1} value={i + 1}>\n                                            {i + 1} parcela{i > 0 ? 's' : ''}\n                                        </option>\n                                    ))}\n                                </select>\n                            )}\n                        </div>\n                    }\n                    <div className=\"mt-6 mb-2 text-lg underline text-white underline-offset-4\">Valor Final</div>\n                    <div className='text-white inline mr-14'>R$: {valorFinal.toFixed(2)}</div>\n\n                    <div className=\"flex justify-start text-white pt-4\">\n                        <button onClick={goToPreviousPage} className=\"border rounded-md p-2 mr-32\">Anterior</button>\n                        <input type=\"submit\" value=\"Próximo\" className=\" border rounded-md p-1 cursor-pointer\" />\n                    </div>\n                </form>\n            </div >\n        </div >\n    );\n}\n\nexport default Summary;\n","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/document.js",["58"],[],"import React, { useEffect, useState } from 'react';\n\nexport default function Document() {\n\n    const [procedimentos, setProcedimentos] = useState([]);\n    const [cirurgias, setCirurgias] = useState([]);\n    const [name, setName] = useState('');\n    const [pagamento, setPagamento] = useState(null);\n    const [percentage, setPercentage] = useState(null);\n    const [desconto, setDesconto] = useState(null);\n    const [parcelasSelecionadas, setParcelasSelecionadas] = useState(null)\n    const [soma, setSoma] = useState(0);\n    const date = new Date();\n\n    useEffect(() => {\n        const nameString = localStorage.getItem('name');\n        const name = JSON.parse(nameString);\n        setName(name);\n\n        const procedimentosString = localStorage.getItem('procedimentos');\n        const procedimentos = JSON.parse(procedimentosString);\n        setProcedimentos(procedimentos);\n\n        const cirurgiasString = localStorage.getItem('cirurgias');\n        const cirurgias = JSON.parse(cirurgiasString);\n        setCirurgias(cirurgias);\n\n        const pagamentoString = localStorage.getItem('pagamento');\n        const pagamento = JSON.parse(pagamentoString);\n        setPagamento(pagamento);\n\n        const somaString = localStorage.getItem('soma');\n        const soma = JSON.parse(somaString);\n        setSoma(soma);\n\n        const descontoString = localStorage.getItem('valorDesconto');\n        const desconto = JSON.parse(descontoString);\n        setDesconto(desconto);\n\n        const percentageString = localStorage.getItem('percentage');\n        const percentage = JSON.parse(percentageString);\n        setPercentage(percentage);\n\n        const parcelasSelecionadasString = localStorage.getItem('parcelasSelecionadas');\n        const parcelasSelecionadas = JSON.parse(parcelasSelecionadasString);\n        setParcelasSelecionadas(parcelasSelecionadas);\n\n    }, []);\n\n    useEffect(() => {\n        if (pagamento === 'aVista') {\n            setPagamento('à vista')\n        } else if (pagamento === 'parcelado') {\n            setPagamento('parcelado')\n        }\n    }, []);\n\n    const procedimentosFiltrados = procedimentos.filter(item => item.price > 0);\n    const cirurgiasFiltradas = cirurgias.filter(item => item.price > 0);\n\n    return (\n        <div className=\"bg-white text-start p-10 text-black\">\n            {\n                procedimentosFiltrados.length > 0 ?\n                    <div className='text-3xl mt-4 mb-6'>\n                        Proposta de tratamento e orçamento\n                    </div>\n                    :\n                    <div className='text-3xl mt-4 mb-16'>\n                        Proposta de tratamento e orçamento\n                    </div>\n            }\n            <div className='my-4'>\n                <div className='inline font-semibold text-lg'>Nome: </div> {name}\n            </div>\n            <div className='my-8'>\n                <div className='inline font-semibold text-lg'>Procedimento proposto:</div>\n                {procedimentosFiltrados.length > 0 ?\n                    <div>\n                        <div className=\"my-4 underline underline-offset-4 font-semibold\">Estéticos:</div>\n                        {procedimentosFiltrados.map((item, index) => {\n                            return (\n                                <div>\n                                    <div key={index}>\n                                        <p>{item.nome} ({item.quant}): R$ {(item.price).toFixed(2)}</p>\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                    :\n                    <></>\n                }\n                {cirurgiasFiltradas.length > 0 ?\n                    <div>\n                        <div className=\"my-4 underline underline-offset-4 font-semibold\">Cirúrgicos:</div>\n                        {cirurgiasFiltradas.map((item, index) => {\n                            return (\n                                <div>\n                                    <div key={index}>\n                                        <p>{item.nome}: R$ {parseFloat(item.price).toFixed(2)}</p>\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                    :\n                    <></>\n                }\n                <div className='mt-4'><b>Total do tratamento:</b> R$ {(soma + desconto).toFixed(2)}</div>\n                <div className='my-2'></div>\n                {desconto > 0 ?\n                    <>\n                        {\n                            procedimentosFiltrados.length > 0 ?\n                                <div className='my-2'><b>Desconto à vista ({percentage}%):</b> R$ {desconto.toFixed(2)}</div>\n                                :\n                                <div className='my-2'><b>Desconto:</b> R$ {desconto.toFixed(2)}</div>\n                        }\n                    </>\n                    :\n                    <></>\n                }\n                {\n                    desconto > 0 ?\n                        <div className='my-2'><b>Valor final com desconto:</b> R$ {soma.toFixed(2)}</div>\n                        :\n                        <></>\n                }\n            </div>\n            <div className='my-8'>\n                {\n                    procedimentosFiltrados.length > 0 ?\n                        <>\n                            {\n                                pagamento === \"parcelado\" ?\n                                    <>\n                                        <div className='inline font-semibold text-lg mr-1'>Pagamento {pagamento}:</div>\n                                        <div className='mx-1 inline'>{parcelasSelecionadas}x de {(soma / parcelasSelecionadas).toFixed(2)} no cartão de crédito</div>\n                                    </>\n                                    :\n                                    <></>\n                            }\n                        </>\n                        :\n                        <>\n                            {\n                                pagamento === \"parcelado\" ?\n                                    <>\n                                        <div className='inline font-semibold text-lg mr-1'>Pagamento {pagamento}:</div>\n                                        <div className='block'>Entrada de 60% à vista R${(soma * 0.6).toFixed(2)}<br></br>\n\n                                            <div>{parcelasSelecionadas}x de R${(soma*0.4 / parcelasSelecionadas).toFixed(2)} no cartão de crédito</div></div>\n                                    </>\n                                    :\n                                    <>\n                                        <div className='inline font-semibold text-lg mr-1'>Pagamento à vista:</div>\n                                        <div className='mx-1 inline-block'> R${soma.toFixed(2)}</div>\n                                    </>\n                            }\n                        </>\n                }\n                <div className='flex mb-2 mt-6 font-semibold'>* Orçamento válido por 45 dias.</div>\n                {\n                    procedimentosFiltrados.length > 0 ?\n                        <>\n                            <div className='text-sm flex'>\n                                * O pagamento à vista poderá ser no PIX, TED ou dinheiro.\n                            </div>\n                            <div className='text-sm flex'>\n                                * Os parcelamentos poderão ser realizados por meio de cartões de crédito, sendo possível utilizar mais de um cartão.\n                            </div>\n                        </>\n                        :\n                        <>\n                            <div className='text-sm flex'> * Entrada de 60% à vista (PIX, TED ou dinheiro) e o restante no cartão de crédito em até 10 vezes sem juros. </div>\n                            <div className='text-sm flex'>* Em todas as opções os acertos deverão ser realizados até 07 dias antes do procedimento, no consultório. Não aceitamos cheques de terceiros e pré datados.</div>\n                            <div className='text-sm flex'> * Estes valores não incluem próteses, medicamentos ou outros tratamentos complementares e exames que possam ser solicitados no preparo pré-operatório, durante a cirurgia ou no período pós-cirúrgico. Estas despesas deverão ser pagas à vista até 07 dias antes da cirurgia.</div>\n                            <div className='text-sm flex'>*Os valores poderão variar com as mudanças das tabelas dos hospitais ou caso mude a programação proposta para este(s) procedimentos.</div>\n                            <div className='text-sm flex'> * Os parcelamentos poderão ser realizados por meio de cartões de crédito, sendo possível utilizar mais de um cartão.</div>\n                        </>\n                }\n            </div>\n            <div className='mt-16'>Belo Horizonte, {date.toLocaleDateString('pt-BR')}</div>\n            <div className='mt-16 text-center bottom-2'>\n                _______________________________________________________\n            </div>\n            <div className='text-center'>Clínica Dr. Eduardo Braz</div>\n        </div>\n    )\n}","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/procedimentos-bf.js",[],[],"/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/summary-bf.jsx",["59"],[],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nfunction Summary() {\n    const [procedimentos, setProcedimentos] = useState([]);\n    const [percentage, setPercentage] = useState(null);\n    const [desconto, setDesconto] = useState(null);\n    const [valorFinal, setValorFinal] = useState(0);\n    const [numParcelas, setNumParcelas] = useState(0);\n    const [maxDesconto, setMaxDesconto] = useState(0);\n    const [parcelasSelecionadas, setParcelasSelecionadas] = useState(0);\n    const [selectedPayment, setSelectedPayment] = useState('aVista');\n    const pagamento = document.getElementById('pagamento');\n\n    let sumProcedimentos = 0;\n\n    useEffect(() => {\n        const procedimentosString = localStorage.getItem('procedimentos');\n        const procedimentos = JSON.parse(procedimentosString);\n        setProcedimentos(procedimentos);\n\n        if (percentage === null) {\n            setPercentage(0)\n        }\n\n        if (desconto === null) {\n            setDesconto(0)\n        }\n\n        const valorCalculado = (sumProcedimentos - desconto) * (1 - percentage / 100);\n        if (percentage >= 0 && percentage <= 10 && desconto <= 1000) {\n            setValorFinal(valorCalculado);\n        } else if (desconto <= 1000) {\n            setValorFinal(sumProcedimentos - desconto);\n        } else {\n            setValorFinal(sumProcedimentos);\n        }\n\n        if (sumProcedimentos < 12000) {\n            setNumParcelas(4)\n            setMaxDesconto(3.5)\n        }\n        else if (sumProcedimentos >= 12000 && sumProcedimentos < 25000) {\n            setNumParcelas(6)\n            setMaxDesconto(5)\n        } else {\n            setNumParcelas(10)\n            setMaxDesconto(10)\n        }\n\n        const pString = localStorage.getItem('password');\n        const p = JSON.parse(pString);\n\n        if (p === null) {\n            history.push(\"/\");\n        }\n\n    }, [desconto, percentage, sumProcedimentos, numParcelas, maxDesconto]);\n\n    const procedimentosFiltrados = procedimentos.filter(item => item.price > 0);\n\n    const submit = (e) => {\n        localStorage.setItem('pagamento', JSON.stringify(pagamento.value));\n        localStorage.setItem('soma', JSON.stringify(valorFinal));\n        localStorage.setItem('percentage', JSON.stringify(percentage));\n        localStorage.setItem('parcelasSelecionadas', JSON.stringify(parcelasSelecionadas));\n        localStorage.setItem('valorDesconto', JSON.stringify(sumProcedimentos - valorFinal));\n        e.preventDefault();\n        history.push('/document-bf');\n    };\n\n    const history = useHistory();\n    const goToPreviousPage = () => {\n        history.push('/procedimentos-bf');\n    };\n\n    return (\n        <div>\n            <div className=\"flex justify-center bg-black/60 h-screen\">\n                <form className=\"pt-6\" onSubmit={submit} autoComplete='off' action='/document'>\n                    <div className=\"flex justify-center text-4xl text-white mb-6\">Resumo</div>\n                    {procedimentosFiltrados.length > 0 ?\n                        <div>\n                            <div className=\"my-4 text-lg underline text-white underline-offset-4\">Procedimentos</div>\n                            {procedimentosFiltrados.map((item, index) => {\n                                sumProcedimentos += item.price;\n                                return (\n                                    <div>\n                                        <div key={index} className=\"text-white\">\n                                            <p>{item.nome} ({item.quant}): R$ {item.price}</p>\n                                        </div>\n                                        <hr />\n                                    </div>\n                                );\n                            })}\n                            <div className='text-white text-end my-2 font-bold'>Soma = {parseFloat(sumProcedimentos).toFixed(2)}</div>\n                        </div>\n                        :\n                        <></>\n                    }\n\n                    {procedimentosFiltrados.length > 0 ?\n                        <div>\n                            <div className=\"mt-6 mb-2 text-lg underline text-white underline-offset-4\">Forma de Pagamento</div>\n                            <select\n                                name=\"pagamento\"\n                                id=\"pagamento\"\n                                className=\"bg-white rounded-md text-sm mr-10\"\n                                onChange={(e) => setSelectedPayment(e.target.value)}\n                            >\n                                <option value=\"aVista\">À vista</option>\n                                <option value=\"parcelado\">Parcelado</option>\n                            </select>\n\n                            {selectedPayment === 'aVista' ? (\n                                <>\n                                    <input\n                                        type=\"number\"\n                                        id=\"percentage\"\n                                        step=\"any\"\n                                        className=\"border rounded-md p-1 w-16 my-4 inline-block bg-white text-black h-6\"\n                                        value={percentage}\n                                        onChange={(e) => {\n                                            const newPercentage = parseFloat(e.target.value);\n                                            if (!isNaN(newPercentage) && newPercentage >= 0 && newPercentage <= 10 && newPercentage <= maxDesconto) {\n                                                setPercentage(newPercentage);\n                                            } else {\n                                                setPercentage(''); // Clear the input value if not valid\n                                            }\n                                        }}\n                                    />\n                                    <label className='text-white m-2'>%</label>\n                                </>\n                            ) : (\n                                <select\n                                    name=\"numeroParcelas\"\n                                    id=\"numeroParcelas\"\n                                    className=\"bg-white rounded-md text-sm\"\n                                    onChange={(e) => setParcelasSelecionadas(parseInt(e.target.value))}\n                                    value={parcelasSelecionadas}\n                                >\n                                    {/* Opções de 1 a 10 */}\n                                    {Array.from({ length: numParcelas }, (_, i) => (\n                                        <option key={i + 1} value={i + 1}>\n                                            {i + 1} parcela{i > 0 ? 's' : ''}\n                                        </option>\n                                    ))}\n                                </select>\n                            )}\n                        </div>\n                        :\n                        <div>\n                            <div className=\"mt-6 mb-2 text-lg underline text-white underline-offset-4\">Negociação</div>\n                            <label className='text-white mr-2'>R$</label>\n                                    <input\n                                        type=\"number\"\n                                        id=\"desconto\"\n                                        className=\"border rounded-md p-1 w-12 my-4 inline-block bg-white text-black h-6 mr-20\"\n                                        max='1000'\n                                        onChange={(e) => setDesconto(parseInt(e.target.value))}\n                                    />\n\n                            <div className=\"mt-6 mb-2 text-lg underline text-white underline-offset-4\">Forma de Pagamento</div>\n                            <select\n                                name=\"pagamento\"\n                                id=\"pagamento\"\n                                className=\"bg-white rounded-md text-sm mr-10\"\n                                onChange={(e) => setSelectedPayment(e.target.value)} // Atualizar o estado ao selecionar uma opção\n                            >\n                                <option value=\"aVista\">À vista</option>\n                                <option value=\"parcelado\">Parcelado</option>\n                            </select>\n\n                            {/* Renderizar o input baseado na opção de pagamento selecionada */}\n                            {selectedPayment === 'aVista' ? (\n                                <>\n                                    <input\n                                        type=\"number\"\n                                        id=\"percentage\"\n                                        step=\"any\"\n                                        className=\"border rounded-md p-1 w-16 my-4 inline-block bg-white text-black h-6\"\n                                        onChange={(e) => {\n                                            if(e.target.value <= 5) {\n                                                setPercentage(e.target.value)\n                                            }\n                                        }}\n                                    />\n                                    <label className='text-white m-2'>%</label>\n                                </>\n                            ) : (\n                                <select\n                                    name=\"numeroParcelas\"\n                                    id=\"numeroParcelas\"\n                                    className=\"bg-white rounded-md text-sm\"\n                                    onChange={(e) => setParcelasSelecionadas(parseInt(e.target.value))}\n                                    value={parcelasSelecionadas}\n                                >\n                                    {Array.from({ length: 10 }, (_, i) => (\n                                        <option key={i + 1} value={i + 1}>\n                                            {i + 1} parcela{i > 0 ? 's' : ''}\n                                        </option>\n                                    ))}\n                                </select>\n                            )}\n                        </div>\n                    }\n                    <div className=\"mt-6 mb-2 text-lg underline text-white underline-offset-4\">Valor Final</div>\n                    <div className='text-white inline mr-14'>R$: {valorFinal.toFixed(2)}</div>\n\n                    <div className=\"flex justify-start text-white pt-4\">\n                        <button onClick={goToPreviousPage} className=\"border rounded-md p-2 mr-32\">Anterior</button>\n                        <input type=\"submit\" value=\"Próximo\" className=\" border rounded-md p-1 cursor-pointer\" />\n                    </div>\n                </form>\n            </div >\n        </div >\n    );\n}\n\nexport default Summary;\n","/Users/anabeatrizbraz/Documents/Personal Projects/relatorios/src/pages/document-bf.js",["60"],[],"import React, { useEffect, useState } from 'react';\n\nexport default function Document() {\n\n    const [procedimentos, setProcedimentos] = useState([]);\n    const [name, setName] = useState('');\n    const [pagamento, setPagamento] = useState(null);\n    const [percentage, setPercentage] = useState(null);\n    const [desconto, setDesconto] = useState(null);\n    const [parcelasSelecionadas, setParcelasSelecionadas] = useState(null)\n    const [soma, setSoma] = useState(0);\n    const date = new Date();\n\n    useEffect(() => {\n        const nameString = localStorage.getItem('name');\n        const name = JSON.parse(nameString);\n        setName(name);\n\n        const procedimentosString = localStorage.getItem('procedimentos');\n        const procedimentos = JSON.parse(procedimentosString);\n        setProcedimentos(procedimentos);\n\n        const pagamentoString = localStorage.getItem('pagamento');\n        const pagamento = JSON.parse(pagamentoString);\n        setPagamento(pagamento);\n\n        const somaString = localStorage.getItem('soma');\n        const soma = JSON.parse(somaString);\n        setSoma(soma);\n\n        const descontoString = localStorage.getItem('valorDesconto');\n        const desconto = JSON.parse(descontoString);\n        setDesconto(desconto);\n\n        const percentageString = localStorage.getItem('percentage');\n        const percentage = JSON.parse(percentageString);\n        setPercentage(percentage);\n\n        const parcelasSelecionadasString = localStorage.getItem('parcelasSelecionadas');\n        const parcelasSelecionadas = JSON.parse(parcelasSelecionadasString);\n        setParcelasSelecionadas(parcelasSelecionadas);\n\n    }, []);\n\n    useEffect(() => {\n        if (pagamento === 'aVista') {\n            setPagamento('à vista')\n        } else if (pagamento === 'parcelado') {\n            setPagamento('parcelado')\n        }\n    }, []);\n\n    const procedimentosFiltrados = procedimentos.filter(item => item.price > 0);\n\n    return (\n        <div className=\"bg-white text-start p-10 text-black\">\n            {\n                procedimentosFiltrados.length > 0 ?\n                    <div className='text-3xl mt-4 mb-6'>\n                        Proposta de tratamento e orçamento\n                    </div>\n                    :\n                    <div className='text-3xl mt-4 mb-16'>\n                        Proposta de tratamento e orçamento\n                    </div>\n            }\n            <div className='my-4'>\n                <div className='inline font-semibold text-lg'>Nome: </div> {name}\n            </div>\n            <div className='my-8'>\n                <div className='inline font-semibold text-lg'>Procedimento proposto:</div>\n                {procedimentosFiltrados.length > 0 ?\n                    <div>\n                        <div className=\"my-4 underline underline-offset-4 font-semibold\">Estéticos:</div>\n                        {procedimentosFiltrados.map((item, index) => {\n                            return (\n                                <div>\n                                    <div key={index}>\n                                        <p>{item.nome} ({item.quant}): R$ {(item.price).toFixed(2)}</p>\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                    :\n                    <></>\n                }\n                <div className='mt-4'><b>Total do tratamento:</b> R$ {(soma + desconto).toFixed(2)}</div>\n                <div className='my-2'></div>\n                {desconto > 0 ?\n                    <>\n                        {\n                            procedimentosFiltrados.length > 0 ?\n                                <div className='my-2'><b>Desconto à vista ({percentage}%):</b> R$ {desconto.toFixed(2)}</div>\n                                :\n                                <div className='my-2'><b>Desconto:</b> R$ {desconto.toFixed(2)}</div>\n                        }\n                    </>\n                    :\n                    <></>\n                }\n                {\n                    desconto > 0 ?\n                        <div className='my-2'><b>Valor final com desconto:</b> R$ {soma.toFixed(2)}</div>\n                        :\n                        <></>\n                }\n            </div>\n            <div className='my-8'>\n                {\n                    procedimentosFiltrados.length > 0 ?\n                        <>\n                            {\n                                pagamento === \"parcelado\" ?\n                                    <>\n                                        <div className='inline font-semibold text-lg mr-1'>Pagamento {pagamento}:</div>\n                                        <div className='mx-1 inline'>{parcelasSelecionadas}x de {(soma / parcelasSelecionadas).toFixed(2)} no cartão de crédito</div>\n                                    </>\n                                    :\n                                    <></>\n                            }\n                        </>\n                        :\n                        <>\n                            {\n                                pagamento === \"parcelado\" ?\n                                    <>\n                                        <div className='inline font-semibold text-lg mr-1'>Pagamento {pagamento}:</div>\n                                        <div className='block'>Entrada de 60% à vista R${(soma * 0.6).toFixed(2)}<br></br>\n\n                                            <div>{parcelasSelecionadas}x de R${(soma*0.4 / parcelasSelecionadas).toFixed(2)} no cartão de crédito</div></div>\n                                    </>\n                                    :\n                                    <>\n                                        <div className='inline font-semibold text-lg mr-1'>Pagamento à vista:</div>\n                                        <div className='mx-1 inline-block'> R${soma.toFixed(2)}</div>\n                                    </>\n                            }\n                        </>\n                }\n                <div className='flex mb-2 mt-6 font-semibold'>* Orçamento válido por 45 dias.</div>\n                {\n                    procedimentosFiltrados.length > 0 ?\n                        <>\n                            <div className='text-sm flex'>\n                                * O pagamento à vista poderá ser no PIX, TED ou dinheiro.\n                            </div>\n                            <div className='text-sm flex'>\n                                * Os parcelamentos poderão ser realizados por meio de cartões de crédito, sendo possível utilizar mais de um cartão.\n                            </div>\n                        </>\n                        :\n                        <>\n                            <div className='text-sm flex'> * Entrada de 60% à vista (PIX, TED ou dinheiro) e o restante no cartão de crédito em até 10 vezes sem juros. </div>\n                            <div className='text-sm flex'>* Em todas as opções os acertos deverão ser realizados até 07 dias antes do procedimento, no consultório. Não aceitamos cheques de terceiros e pré datados.</div>\n                            <div className='text-sm flex'> * Estes valores não incluem próteses, medicamentos ou outros tratamentos complementares e exames que possam ser solicitados no preparo pré-operatório, durante a cirurgia ou no período pós-cirúrgico. Estas despesas deverão ser pagas à vista até 07 dias antes da cirurgia.</div>\n                            <div className='text-sm flex'>*Os valores poderão variar com as mudanças das tabelas dos hospitais ou caso mude a programação proposta para este(s) procedimentos.</div>\n                            <div className='text-sm flex'> * Os parcelamentos poderão ser realizados por meio de cartões de crédito, sendo possível utilizar mais de um cartão.</div>\n                        </>\n                }\n            </div>\n            <div className='mt-16'>Belo Horizonte, {date.toLocaleDateString('pt-BR')}</div>\n            <div className='mt-16 text-center bottom-2'>\n                _______________________________________________________\n            </div>\n            <div className='text-center'>Clínica Dr. Eduardo Braz</div>\n        </div>\n    )\n}",{"ruleId":"61","severity":1,"message":"62","line":64,"column":8,"nodeType":"63","endLine":64,"endColumn":88,"suggestions":"64"},{"ruleId":"61","severity":1,"message":"65","line":56,"column":8,"nodeType":"63","endLine":56,"endColumn":10,"suggestions":"66"},{"ruleId":"61","severity":1,"message":"62","line":58,"column":8,"nodeType":"63","endLine":58,"endColumn":74,"suggestions":"67"},{"ruleId":"61","severity":1,"message":"65","line":51,"column":8,"nodeType":"63","endLine":51,"endColumn":10,"suggestions":"68"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["69"],"React Hook useEffect has a missing dependency: 'pagamento'. Either include it or remove the dependency array.",["70"],["71"],["72"],{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},{"desc":"75","fix":"79"},"Update the dependencies array to be: [desconto, percentage, sumProcedimentos, sumCirurgias, numParcelas, maxDesconto, history]",{"range":"80","text":"81"},"Update the dependencies array to be: [pagamento]",{"range":"82","text":"83"},"Update the dependencies array to be: [desconto, percentage, sumProcedimentos, numParcelas, maxDesconto, history]",{"range":"84","text":"85"},{"range":"86","text":"83"},[2192,2272],"[desconto, percentage, sumProcedimentos, sumCirurgias, numParcelas, maxDesconto, history]",[2070,2072],"[pagamento]",[1913,1979],"[desconto, percentage, sumProcedimentos, numParcelas, maxDesconto, history]",[1862,1864]]